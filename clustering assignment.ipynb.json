{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import datetime as dt\n",
    "\n",
    "import sklearn\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import silhouette_score\n",
    "\n",
    "from scipy.cluster.hierarchy import linkage\n",
    "from scipy.cluster.hierarchy import dendrogram\n",
    "from scipy.cluster.hierarchy import cut_tree\n",
    "\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>income</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>90.2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.58</td>\n",
       "      <td>44.9</td>\n",
       "      <td>1610</td>\n",
       "      <td>9.44</td>\n",
       "      <td>56.2</td>\n",
       "      <td>5.82</td>\n",
       "      <td>553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Albania</td>\n",
       "      <td>16.6</td>\n",
       "      <td>28.0</td>\n",
       "      <td>6.55</td>\n",
       "      <td>48.6</td>\n",
       "      <td>9930</td>\n",
       "      <td>4.49</td>\n",
       "      <td>76.3</td>\n",
       "      <td>1.65</td>\n",
       "      <td>4090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>27.3</td>\n",
       "      <td>38.4</td>\n",
       "      <td>4.17</td>\n",
       "      <td>31.4</td>\n",
       "      <td>12900</td>\n",
       "      <td>16.10</td>\n",
       "      <td>76.5</td>\n",
       "      <td>2.89</td>\n",
       "      <td>4460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Angola</td>\n",
       "      <td>119.0</td>\n",
       "      <td>62.3</td>\n",
       "      <td>2.85</td>\n",
       "      <td>42.9</td>\n",
       "      <td>5900</td>\n",
       "      <td>22.40</td>\n",
       "      <td>60.1</td>\n",
       "      <td>6.16</td>\n",
       "      <td>3530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>10.3</td>\n",
       "      <td>45.5</td>\n",
       "      <td>6.03</td>\n",
       "      <td>58.9</td>\n",
       "      <td>19100</td>\n",
       "      <td>1.44</td>\n",
       "      <td>76.8</td>\n",
       "      <td>2.13</td>\n",
       "      <td>12200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>162</td>\n",
       "      <td>Vanuatu</td>\n",
       "      <td>29.2</td>\n",
       "      <td>46.6</td>\n",
       "      <td>5.25</td>\n",
       "      <td>52.7</td>\n",
       "      <td>2950</td>\n",
       "      <td>2.62</td>\n",
       "      <td>63.0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>2970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>163</td>\n",
       "      <td>Venezuela</td>\n",
       "      <td>17.1</td>\n",
       "      <td>28.5</td>\n",
       "      <td>4.91</td>\n",
       "      <td>17.6</td>\n",
       "      <td>16500</td>\n",
       "      <td>45.90</td>\n",
       "      <td>75.4</td>\n",
       "      <td>2.47</td>\n",
       "      <td>13500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>164</td>\n",
       "      <td>Vietnam</td>\n",
       "      <td>23.3</td>\n",
       "      <td>72.0</td>\n",
       "      <td>6.84</td>\n",
       "      <td>80.2</td>\n",
       "      <td>4490</td>\n",
       "      <td>12.10</td>\n",
       "      <td>73.1</td>\n",
       "      <td>1.95</td>\n",
       "      <td>1310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>165</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>56.3</td>\n",
       "      <td>30.0</td>\n",
       "      <td>5.18</td>\n",
       "      <td>34.4</td>\n",
       "      <td>4480</td>\n",
       "      <td>23.60</td>\n",
       "      <td>67.5</td>\n",
       "      <td>4.67</td>\n",
       "      <td>1310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>166</td>\n",
       "      <td>Zambia</td>\n",
       "      <td>83.1</td>\n",
       "      <td>37.0</td>\n",
       "      <td>5.89</td>\n",
       "      <td>30.9</td>\n",
       "      <td>3280</td>\n",
       "      <td>14.00</td>\n",
       "      <td>52.0</td>\n",
       "      <td>5.40</td>\n",
       "      <td>1460</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>167 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 country  child_mort  exports  health  imports  income  \\\n",
       "0            Afghanistan        90.2     10.0    7.58     44.9    1610   \n",
       "1                Albania        16.6     28.0    6.55     48.6    9930   \n",
       "2                Algeria        27.3     38.4    4.17     31.4   12900   \n",
       "3                 Angola       119.0     62.3    2.85     42.9    5900   \n",
       "4    Antigua and Barbuda        10.3     45.5    6.03     58.9   19100   \n",
       "..                   ...         ...      ...     ...      ...     ...   \n",
       "162              Vanuatu        29.2     46.6    5.25     52.7    2950   \n",
       "163            Venezuela        17.1     28.5    4.91     17.6   16500   \n",
       "164              Vietnam        23.3     72.0    6.84     80.2    4490   \n",
       "165                Yemen        56.3     30.0    5.18     34.4    4480   \n",
       "166               Zambia        83.1     37.0    5.89     30.9    3280   \n",
       "\n",
       "     inflation  life_expec  total_fer   gdpp  \n",
       "0         9.44        56.2       5.82    553  \n",
       "1         4.49        76.3       1.65   4090  \n",
       "2        16.10        76.5       2.89   4460  \n",
       "3        22.40        60.1       6.16   3530  \n",
       "4         1.44        76.8       2.13  12200  \n",
       "..         ...         ...        ...    ...  \n",
       "162       2.62        63.0       3.50   2970  \n",
       "163      45.90        75.4       2.47  13500  \n",
       "164      12.10        73.1       1.95   1310  \n",
       "165      23.60        67.5       4.67   1310  \n",
       "166      14.00        52.0       5.40   1460  \n",
       "\n",
       "[167 rows x 10 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the data from CSV file\n",
    "country = pd.read_csv('/Users/khemendrasai/Desktop/Data science/clustering assignment/Country-data.csv')\n",
    "country"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 167 entries, 0 to 166\n",
      "Data columns (total 10 columns):\n",
      "country       167 non-null object\n",
      "child_mort    167 non-null float64\n",
      "exports       167 non-null float64\n",
      "health        167 non-null float64\n",
      "imports       167 non-null float64\n",
      "income        167 non-null int64\n",
      "inflation     167 non-null float64\n",
      "life_expec    167 non-null float64\n",
      "total_fer     167 non-null float64\n",
      "gdpp          167 non-null int64\n",
      "dtypes: float64(7), int64(2), object(1)\n",
      "memory usage: 13.2+ KB\n"
     ]
    }
   ],
   "source": [
    "# Looking at the type of data\n",
    "country.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>90.2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.58</td>\n",
       "      <td>44.9</td>\n",
       "      <td>9.44</td>\n",
       "      <td>56.2</td>\n",
       "      <td>5.82</td>\n",
       "      <td>553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>16.6</td>\n",
       "      <td>28.0</td>\n",
       "      <td>6.55</td>\n",
       "      <td>48.6</td>\n",
       "      <td>4.49</td>\n",
       "      <td>76.3</td>\n",
       "      <td>1.65</td>\n",
       "      <td>4090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>27.3</td>\n",
       "      <td>38.4</td>\n",
       "      <td>4.17</td>\n",
       "      <td>31.4</td>\n",
       "      <td>16.10</td>\n",
       "      <td>76.5</td>\n",
       "      <td>2.89</td>\n",
       "      <td>4460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>119.0</td>\n",
       "      <td>62.3</td>\n",
       "      <td>2.85</td>\n",
       "      <td>42.9</td>\n",
       "      <td>22.40</td>\n",
       "      <td>60.1</td>\n",
       "      <td>6.16</td>\n",
       "      <td>3530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>10.3</td>\n",
       "      <td>45.5</td>\n",
       "      <td>6.03</td>\n",
       "      <td>58.9</td>\n",
       "      <td>1.44</td>\n",
       "      <td>76.8</td>\n",
       "      <td>2.13</td>\n",
       "      <td>12200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   child_mort  exports  health  imports  inflation  life_expec  total_fer  \\\n",
       "0        90.2     10.0    7.58     44.9       9.44        56.2       5.82   \n",
       "1        16.6     28.0    6.55     48.6       4.49        76.3       1.65   \n",
       "2        27.3     38.4    4.17     31.4      16.10        76.5       2.89   \n",
       "3       119.0     62.3    2.85     42.9      22.40        60.1       6.16   \n",
       "4        10.3     45.5    6.03     58.9       1.44        76.8       2.13   \n",
       "\n",
       "    gdpp  \n",
       "0    553  \n",
       "1   4090  \n",
       "2   4460  \n",
       "3   3530  \n",
       "4  12200  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the coulumns which have numerical continous variables\n",
    "scale = country[['child_mort','exports','health','imports','inflation','life_expec','total_fer','gdpp']]\n",
    "scale.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Outlier treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['child_mort', 'exports', 'health', 'imports', 'inflation', 'life_expec',\n",
       "       'total_fer', 'gdpp'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scale.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x2160 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,30))\n",
    "data = ['child_mort', 'exports', 'health', 'imports', 'inflation', 'life_expec',\n",
    "       'total_fer', 'gdpp']\n",
    "for i in enumerate(data):\n",
    "    box = plt.subplot(4,2,i[0]+1)\n",
    "    sns.boxplot(x=i[1],data = scale)\n",
    "    plt.xticks(rotation=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:9114: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._update_inplace(new_data)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3326: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:24: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:29: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:30: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:35: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:36: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:9114: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._update_inplace(new_data)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3326: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:42: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "# Converting the data which are over 99%'le and under 1%'le value to the values of 99%'le and 1%'le respectively\n",
    "\n",
    "Q1 = scale['child_mort'].quantile(0.01)\n",
    "Q4 = scale['child_mort'].quantile(0.99)\n",
    "scale['child_mort'][scale['child_mort']<=Q1] = Q1\n",
    "scale['child_mort'][scale['child_mort']>=Q4] = Q4\n",
    "\n",
    "Q1 = scale['exports'].quantile(0.01)\n",
    "Q4 = scale['exports'].quantile(0.99)\n",
    "scale['exports'][scale['exports']<=Q1] = Q1\n",
    "scale['exports'][scale['exports']>=Q4] = Q4\n",
    "\n",
    "Q1 = scale['health'].quantile(0.01)\n",
    "Q4 = scale['health'].quantile(0.99)\n",
    "scale['health'][scale['health']<=Q1] = Q1\n",
    "scale['health'][scale['health']>=Q4] = Q4\n",
    "\n",
    "Q1 = scale['imports'].quantile(0.01)\n",
    "Q4 = scale['imports'].quantile(0.99)\n",
    "scale['imports'][scale['imports']<=Q1] = Q1\n",
    "scale['imports'][scale['imports']>=Q4] = Q4\n",
    "\n",
    "Q1 = scale['inflation'].quantile(0.01)\n",
    "Q4 = scale['inflation'].quantile(0.99)\n",
    "scale['inflation'][scale['inflation']<=Q1] = Q1\n",
    "scale['inflation'][scale['inflation']>=Q4] = Q4\n",
    "\n",
    "\n",
    "Q1 = scale['life_expec'].quantile(0.01)\n",
    "Q4 = scale['life_expec'].quantile(0.99)\n",
    "scale['life_expec'][scale['life_expec']<=Q1] = Q1\n",
    "scale['life_expec'][scale['life_expec']>=Q4] = Q4\n",
    "\n",
    "\n",
    "Q1 = scale['total_fer'].quantile(0.01)\n",
    "Q4 = scale['total_fer'].quantile(0.99)\n",
    "scale['total_fer'][scale['total_fer']<=Q1] = Q1\n",
    "scale['total_fer'][scale['total_fer']>=Q4] = Q4\n",
    "\n",
    "\n",
    "Q1 = scale['gdpp'].quantile(0.01)\n",
    "Q4 = scale['gdpp'].quantile(0.99)\n",
    "scale['gdpp'][scale['gdpp']<=Q1] = Q1\n",
    "scale['gdpp'][scale['gdpp']>=Q4] = Q4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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maAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQmaAFAADQ2boGrdNOOy2nnXbaei4S5pptBpgH9lXArJvGfmrzei5scXFxPRcHc882A8wD+ypg1k1jP6XrIAAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFgAAQGeCFmwAO3fuzHOe85zs3LlzTadh7fRqj8XFxTz+8Y/P4uJip5KxXibbzvYJMP8ELdgAduzYkUsvvTRnnXXWmk7D2unV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tAAANoCdO3fmvPPOS2st55133i13AZaGL7nyyitvM85q5rmn6fa03MXFxVx55ZW3LHOlOwk7d+7Mueeee8vv55577h6XsTTP3dVleV1Xms/u6rFSGXpaqRzzrGe9es5rX76LPW1el6WMrrrqqlx33XU55ZRT1nOxe7S4uJiDvtGmXQxm0EHXfzWLi1+bme8qrNbi4mIOOeSQaReD/bD8GLnRj1H2s3u3r9vzjh07cvPNNydJbrrpppx11ll53vOelx07duTGG2+8zfiT46xmnnuabk/LXX7nYPv27TnzzDP3uJxdu3bd8vuNN964x2XsztJyW2u3qutK89ldPVYqQ08rlWOe9axXz3nty3exp73e0aqqX6qqi6rqoi9+8YtrXiAAmAeOj8yaCy+88JagsGvXrlxwwQW3DG/ttqF9cpzVzHNP0+1puZN3nnb3+/LlTJaxtbbHZezO0nL3ZT67q8dK0/a0UjnmWc969ZzXvnwXe9rrHa3W2hlJzkiS44477nZdWjviiCOSJC9/+ctvz2y6OeWUU3LxFV+YdjGYQTff6W7Zet/DZ+a7Cqvl7sD66Xl8TG57jNzoxyj72b3b1+35+OOPzznnnJNdu3Zl8+bNedzjHnfL8Le85S23CVuT46xmnnuabk/LXVhYuNUJ7cLCworLmSxjVe1xGbuztNzW2qrns7t6rDRtTyuVY571rFfPee3Ld7Enz2gBAGwA27Zty0EHDad2mzZtylOf+tRbhh988MG3GX9ynNXMc0/T7Wm5p5566q2mW/778uVs3vzN6/8HH3zwHpexO0vLXV7Xleazu3qsVIaeVirHPOtZr57z2pfvYk+CFgDABrBly5accMIJqaqccMIJ2bJly62GL1lYWLjNOKuZ556m29Nyt27desudg4WFhWzdunXF5Zx44om3/H7iiSfucRmTdyOWl2l5XVeaz+7qsVIZelqpHPOsZ716zmtfvos9CVoAABvEtm3bcuyxx97m6v+2bdtyzDHH5Oijj86pp56623H2Ns+VptvTck899dQceuihq7qDsG3bthx99NE55phjVlzGqaeeumJdJuu6L2VdTRl6Wqkc86xnvXrOa1++i73U7h6O3JPjjjuuXXTRRfu9sKW+xrPSH3up//t1R5007aLs1iGXn5MkM1u+jeyQy8/Jwz07wBzqtZ+tqotba8f1KNOB4PYe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\n",
      "text/plain": [
       "<Figure size 1080x2160 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,30))\n",
    "data = ['child_mort', 'exports', 'health', 'imports', 'inflation', 'life_expec',\n",
    "       'total_fer', 'gdpp']\n",
    "for i in enumerate(data):\n",
    "    box = plt.subplot(4,2,i[0]+1)\n",
    "    sns.boxplot(x=i[1],data = scale)\n",
    "    plt.xticks(rotation=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>child_mort</th>\n",
       "      <th>exports</th>\n",
       "      <th>health</th>\n",
       "      <th>imports</th>\n",
       "      <th>inflation</th>\n",
       "      <th>life_expec</th>\n",
       "      <th>total_fer</th>\n",
       "      <th>gdpp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.344012</td>\n",
       "      <td>-1.202883</td>\n",
       "      <td>0.300762</td>\n",
       "      <td>-0.080933</td>\n",
       "      <td>0.263649</td>\n",
       "      <td>-1.693799</td>\n",
       "      <td>1.926928</td>\n",
       "      <td>-0.702314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-0.547543</td>\n",
       "      <td>-0.500319</td>\n",
       "      <td>-0.090190</td>\n",
       "      <td>0.080055</td>\n",
       "      <td>-0.375251</td>\n",
       "      <td>0.663053</td>\n",
       "      <td>-0.865911</td>\n",
       "      <td>-0.498775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.272548</td>\n",
       "      <td>-0.094393</td>\n",
       "      <td>-0.993555</td>\n",
       "      <td>-0.668322</td>\n",
       "      <td>1.123260</td>\n",
       "      <td>0.686504</td>\n",
       "      <td>-0.035427</td>\n",
       "      <td>-0.477483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2.084186</td>\n",
       "      <td>0.838457</td>\n",
       "      <td>-1.494581</td>\n",
       "      <td>-0.167954</td>\n",
       "      <td>1.936405</td>\n",
       "      <td>-1.236499</td>\n",
       "      <td>2.154642</td>\n",
       "      <td>-0.531000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-0.709457</td>\n",
       "      <td>0.182730</td>\n",
       "      <td>-0.287564</td>\n",
       "      <td>0.528210</td>\n",
       "      <td>-0.768917</td>\n",
       "      <td>0.721681</td>\n",
       "      <td>-0.544433</td>\n",
       "      <td>-0.032079</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   child_mort   exports    health   imports  inflation  life_expec  total_fer  \\\n",
       "0    1.344012 -1.202883  0.300762 -0.080933   0.263649   -1.693799   1.926928   \n",
       "1   -0.547543 -0.500319 -0.090190  0.080055  -0.375251    0.663053  -0.865911   \n",
       "2   -0.272548 -0.094393 -0.993555 -0.668322   1.123260    0.686504  -0.035427   \n",
       "3    2.084186  0.838457 -1.494581 -0.167954   1.936405   -1.236499   2.154642   \n",
       "4   -0.709457  0.182730 -0.287564  0.528210  -0.768917    0.721681  -0.544433   \n",
       "\n",
       "       gdpp  \n",
       "0 -0.702314  \n",
       "1 -0.498775  \n",
       "2 -0.477483  \n",
       "3 -0.531000  \n",
       "4 -0.032079  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Standardisation\n",
    "\n",
    "scaler = StandardScaler()\n",
    "\n",
    "scaled = scaler.fit_transform(scale)\n",
    "scaled = pd.DataFrame(scaled)\n",
    "scaled.columns = ['child_mort','exports','health','imports','inflation','life_expec','total_fer','gdpp']\n",
    "scaled.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Performing PCA\n",
    "pca = PCA(random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PCA(copy=True, iterated_power='auto', n_components=None, random_state=42,\n",
       "    svd_solver='auto', tol=0.0, whiten=False)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.fit(scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.46708736,  0.27964026,  0.18935744,  0.18154084, -0.25543599,\n",
       "         0.46519038, -0.45527675,  0.38195662],\n",
       "       [ 0.15780035,  0.61806494, -0.22253917,  0.69077925, -0.02101393,\n",
       "        -0.20246088,  0.12894841, -0.09129867],\n",
       "       [-0.2246217 ,  0.17961203, -0.68989927, -0.22643866,  0.55311626,\n",
       "         0.21515854, -0.18274394, -0.06650556],\n",
       "       [ 0.16372494,  0.21911315,  0.38463628, -0.06042757,  0.60368916,\n",
       "         0.00886963,  0.26225221,  0.58334511],\n",
       "       [ 0.24865689,  0.11391134, -0.4680248 , -0.29736251, -0.49061623,\n",
       "        -0.00778292,  0.24224232,  0.56415963],\n",
       "       [ 0.17828896,  0.06584697,  0.00898956, -0.12504119,  0.04699501,\n",
       "        -0.63785503, -0.71010872,  0.18665248],\n",
       "       [-0.03212657, -0.66426061, -0.26710921,  0.57158264,  0.14044125,\n",
       "        -0.02123458, -0.04796325,  0.37040055],\n",
       "       [ 0.76486493, -0.03118067,  0.01544832,  0.06461059,  0.03600157,\n",
       "         0.53746173, -0.32967804, -0.10366958]])"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.components_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.4546732 , 0.19015124, 0.14568736, 0.09218637, 0.06946785,\n",
       "       0.02205195, 0.01512397, 0.01065807])"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "var_cumu = np.cumsum(pca.explained_variance_ratio_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a270d3990>]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1,len(var_cumu)+1), var_cumu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(167, 5)"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Since 95% of the variance is explaned by 5 variables, number components is to be considered as 5\n",
    "\n",
    "final = PCA(n_components = 5, random_state = 42)\n",
    "final_np = final.fit_transform(scaled)\n",
    "final_np.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-2.922710</td>\n",
       "      <td>-0.004230</td>\n",
       "      <td>-1.231149</td>\n",
       "      <td>0.316843</td>\n",
       "      <td>0.034877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.721314</td>\n",
       "      <td>-0.512738</td>\n",
       "      <td>0.203737</td>\n",
       "      <td>-0.977500</td>\n",
       "      <td>-0.486942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.342371</td>\n",
       "      <td>-0.465476</td>\n",
       "      <td>1.688283</td>\n",
       "      <td>-0.010717</td>\n",
       "      <td>-0.249172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-3.306144</td>\n",
       "      <td>1.599659</td>\n",
       "      <td>1.198166</td>\n",
       "      <td>1.373552</td>\n",
       "      <td>0.645169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1.191659</td>\n",
       "      <td>0.232628</td>\n",
       "      <td>0.102564</td>\n",
       "      <td>-0.837921</td>\n",
       "      <td>0.043565</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PC1       PC2       PC3       PC4       PC5\n",
       "0 -2.922710 -0.004230 -1.231149  0.316843  0.034877\n",
       "1  0.721314 -0.512738  0.203737 -0.977500 -0.486942\n",
       "2 -0.342371 -0.465476  1.688283 -0.010717 -0.249172\n",
       "3 -3.306144  1.599659  1.198166  1.373552  0.645169\n",
       "4  1.191659  0.232628  0.102564 -0.837921  0.043565"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df = pd.DataFrame(final_np)\n",
    "final_df.columns = ['PC1','PC2','PC3','PC4','PC5']\n",
    "final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Albania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Algeria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Angola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               country\n",
       "0          Afghanistan\n",
       "1              Albania\n",
       "2              Algeria\n",
       "3               Angola\n",
       "4  Antigua and Barbuda"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Taking out the country colun separately\n",
    "y = country[['country']]\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-2.922710</td>\n",
       "      <td>-0.004230</td>\n",
       "      <td>-1.231149</td>\n",
       "      <td>0.316843</td>\n",
       "      <td>0.034877</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.721314</td>\n",
       "      <td>-0.512738</td>\n",
       "      <td>0.203737</td>\n",
       "      <td>-0.977500</td>\n",
       "      <td>-0.486942</td>\n",
       "      <td>Albania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.342371</td>\n",
       "      <td>-0.465476</td>\n",
       "      <td>1.688283</td>\n",
       "      <td>-0.010717</td>\n",
       "      <td>-0.249172</td>\n",
       "      <td>Algeria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-3.306144</td>\n",
       "      <td>1.599659</td>\n",
       "      <td>1.198166</td>\n",
       "      <td>1.373552</td>\n",
       "      <td>0.645169</td>\n",
       "      <td>Angola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1.191659</td>\n",
       "      <td>0.232628</td>\n",
       "      <td>0.102564</td>\n",
       "      <td>-0.837921</td>\n",
       "      <td>0.043565</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PC1       PC2       PC3       PC4       PC5              country\n",
       "0 -2.922710 -0.004230 -1.231149  0.316843  0.034877          Afghanistan\n",
       "1  0.721314 -0.512738  0.203737 -0.977500 -0.486942              Albania\n",
       "2 -0.342371 -0.465476  1.688283 -0.010717 -0.249172              Algeria\n",
       "3 -3.306144  1.599659  1.198166  1.373552  0.645169               Angola\n",
       "4  1.191659  0.232628  0.102564 -0.837921  0.043565  Antigua and Barbuda"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_pca = pd.concat([final_df,y],axis = 1)\n",
    "final_pca.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(167, 6)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_pca.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-2.922710</td>\n",
       "      <td>-0.004230</td>\n",
       "      <td>-1.231149</td>\n",
       "      <td>0.316843</td>\n",
       "      <td>0.034877</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.721314</td>\n",
       "      <td>-0.512738</td>\n",
       "      <td>0.203737</td>\n",
       "      <td>-0.977500</td>\n",
       "      <td>-0.486942</td>\n",
       "      <td>Albania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.342371</td>\n",
       "      <td>-0.465476</td>\n",
       "      <td>1.688283</td>\n",
       "      <td>-0.010717</td>\n",
       "      <td>-0.249172</td>\n",
       "      <td>Algeria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-3.306144</td>\n",
       "      <td>1.599659</td>\n",
       "      <td>1.198166</td>\n",
       "      <td>1.373552</td>\n",
       "      <td>0.645169</td>\n",
       "      <td>Angola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1.191659</td>\n",
       "      <td>0.232628</td>\n",
       "      <td>0.102564</td>\n",
       "      <td>-0.837921</td>\n",
       "      <td>0.043565</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PC1       PC2       PC3       PC4       PC5              country\n",
       "0 -2.922710 -0.004230 -1.231149  0.316843  0.034877          Afghanistan\n",
       "1  0.721314 -0.512738  0.203737 -0.977500 -0.486942              Albania\n",
       "2 -0.342371 -0.465476  1.688283 -0.010717 -0.249172              Algeria\n",
       "3 -3.306144  1.599659  1.198166  1.373552  0.645169               Angola\n",
       "4  1.191659  0.232628  0.102564 -0.837921  0.043565  Antigua and Barbuda"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dataset set obtained after PCA with reduced dimensionality\n",
    "\n",
    "final_pca.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>1.670000e+02</td>\n",
       "      <td>1.670000e+02</td>\n",
       "      <td>1.670000e+02</td>\n",
       "      <td>1.670000e+02</td>\n",
       "      <td>1.670000e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>-3.456982e-17</td>\n",
       "      <td>1.296368e-17</td>\n",
       "      <td>-1.878072e-17</td>\n",
       "      <td>1.396089e-17</td>\n",
       "      <td>-4.686870e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>1.912929e+00</td>\n",
       "      <td>1.237083e+00</td>\n",
       "      <td>1.082830e+00</td>\n",
       "      <td>8.613557e-01</td>\n",
       "      <td>7.477236e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-4.419871e+00</td>\n",
       "      <td>-2.754204e+00</td>\n",
       "      <td>-2.854016e+00</td>\n",
       "      <td>-1.450985e+00</td>\n",
       "      <td>-2.325598e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>-1.427723e+00</td>\n",
       "      <td>-7.805355e-01</td>\n",
       "      <td>-6.748316e-01</td>\n",
       "      <td>-6.266449e-01</td>\n",
       "      <td>-3.953365e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>1.771699e-01</td>\n",
       "      <td>-8.424312e-02</td>\n",
       "      <td>-4.988664e-02</td>\n",
       "      <td>-9.093262e-02</td>\n",
       "      <td>7.297911e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1.395185e+00</td>\n",
       "      <td>6.230869e-01</td>\n",
       "      <td>6.941258e-01</td>\n",
       "      <td>5.208254e-01</td>\n",
       "      <td>4.019541e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>5.114368e+00</td>\n",
       "      <td>5.385590e+00</td>\n",
       "      <td>3.420767e+00</td>\n",
       "      <td>2.885014e+00</td>\n",
       "      <td>2.781562e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                PC1           PC2           PC3           PC4           PC5\n",
       "count  1.670000e+02  1.670000e+02  1.670000e+02  1.670000e+02  1.670000e+02\n",
       "mean  -3.456982e-17  1.296368e-17 -1.878072e-17  1.396089e-17 -4.686870e-17\n",
       "std    1.912929e+00  1.237083e+00  1.082830e+00  8.613557e-01  7.477236e-01\n",
       "min   -4.419871e+00 -2.754204e+00 -2.854016e+00 -1.450985e+00 -2.325598e+00\n",
       "25%   -1.427723e+00 -7.805355e-01 -6.748316e-01 -6.266449e-01 -3.953365e-01\n",
       "50%    1.771699e-01 -8.424312e-02 -4.988664e-02 -9.093262e-02  7.297911e-03\n",
       "75%    1.395185e+00  6.230869e-01  6.941258e-01  5.208254e-01  4.019541e-01\n",
       "max    5.114368e+00  5.385590e+00  3.420767e+00  2.885014e+00  2.781562e+00"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_pca.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a277e8290>]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# elbow-curve/SSD\n",
    "ssd = []\n",
    "range_n_clusters = [2, 3, 4, 5, 6, 7, 8]\n",
    "for num_clusters in range_n_clusters:\n",
    "    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)\n",
    "    kmeans.fit(final_df)\n",
    "    \n",
    "    ssd.append(kmeans.inertia_)\n",
    "    \n",
    "# plot the SSDs for each n_clusters\n",
    "# ssd\n",
    "plt.plot(ssd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Itcan be observed the curve getting flatter at 4 clusters which shows the reduced impact of clustering after increasing the cluster beyond 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For n_clusters=2, the silhouette score is 0.30777110746932773\n",
      "For n_clusters=3, the silhouette score is 0.29364190863161305\n",
      "For n_clusters=4, the silhouette score is 0.29691401773507586\n",
      "For n_clusters=5, the silhouette score is 0.2901029805690922\n",
      "For n_clusters=6, the silhouette score is 0.26497784025534754\n",
      "For n_clusters=7, the silhouette score is 0.2769673638202727\n",
      "For n_clusters=8, the silhouette score is 0.22675230143379063\n"
     ]
    }
   ],
   "source": [
    "# silhouette analysis\n",
    "range_n_clusters = [2, 3, 4, 5, 6, 7, 8]\n",
    "\n",
    "for num_clusters in range_n_clusters:\n",
    "    \n",
    "    # intialise kmeans\n",
    "    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)\n",
    "    kmeans.fit(final_df)\n",
    "    \n",
    "    cluster_labels = kmeans.labels_\n",
    "    \n",
    "    # silhouette score\n",
    "    silhouette_avg = silhouette_score(final_df, cluster_labels)\n",
    "    print(\"For n_clusters={0}, the silhouette score is {1}\".format(num_clusters, silhouette_avg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Above hypothesis is also validated by the silhoutte score which shows an optimal score at k = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=50,\n",
       "       n_clusters=4, n_init=10, n_jobs=None, precompute_distances='auto',\n",
       "       random_state=None, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# k-means with k=4\n",
    "kmeans = KMeans(n_clusters=4, max_iter=50)\n",
    "kmeans.fit(final_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 1, 3, 3, 3, 3, 1, 3, 0, 3, 3, 1, 0,\n",
       "       3, 3, 3, 0, 0, 3, 0, 1, 3, 0, 0, 3, 3, 3, 0, 0, 0, 1, 0, 3, 1, 1,\n",
       "       1, 3, 3, 3, 3, 0, 0, 3, 3, 1, 1, 0, 0, 3, 1, 0, 1, 3, 3, 0, 0, 3,\n",
       "       0, 3, 1, 3, 3, 3, 0, 2, 1, 1, 3, 1, 3, 3, 0, 0, 3, 3, 0, 3, 3, 0,\n",
       "       0, 3, 3, 2, 3, 0, 0, 3, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3,\n",
       "       1, 1, 0, 0, 1, 3, 0, 3, 3, 3, 3, 3, 1, 1, 3, 3, 0, 3, 3, 0, 3, 2,\n",
       "       0, 2, 3, 1, 3, 0, 1, 1, 3, 3, 0, 3, 1, 1, 3, 0, 3, 0, 0, 3, 3, 3,\n",
       "       3, 0, 3, 3, 1, 1, 3, 3, 3, 3, 3, 0, 0], dtype=int32)"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>country</th>\n",
       "      <th>cluster_id</th>\n",
       "      <th>cluster_labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-2.922710</td>\n",
       "      <td>-0.004230</td>\n",
       "      <td>-1.231149</td>\n",
       "      <td>0.316843</td>\n",
       "      <td>0.034877</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.721314</td>\n",
       "      <td>-0.512738</td>\n",
       "      <td>0.203737</td>\n",
       "      <td>-0.977500</td>\n",
       "      <td>-0.486942</td>\n",
       "      <td>Albania</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.342371</td>\n",
       "      <td>-0.465476</td>\n",
       "      <td>1.688283</td>\n",
       "      <td>-0.010717</td>\n",
       "      <td>-0.249172</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-3.306144</td>\n",
       "      <td>1.599659</td>\n",
       "      <td>1.198166</td>\n",
       "      <td>1.373552</td>\n",
       "      <td>0.645169</td>\n",
       "      <td>Angola</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1.191659</td>\n",
       "      <td>0.232628</td>\n",
       "      <td>0.102564</td>\n",
       "      <td>-0.837921</td>\n",
       "      <td>0.043565</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PC1       PC2       PC3       PC4       PC5              country  \\\n",
       "0 -2.922710 -0.004230 -1.231149  0.316843  0.034877          Afghanistan   \n",
       "1  0.721314 -0.512738  0.203737 -0.977500 -0.486942              Albania   \n",
       "2 -0.342371 -0.465476  1.688283 -0.010717 -0.249172              Algeria   \n",
       "3 -3.306144  1.599659  1.198166  1.373552  0.645169               Angola   \n",
       "4  1.191659  0.232628  0.102564 -0.837921  0.043565  Antigua and Barbuda   \n",
       "\n",
       "   cluster_id  cluster_labels  \n",
       "0           0               0  \n",
       "1           3               0  \n",
       "2           3               0  \n",
       "3           0               1  \n",
       "4           3               0  "
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_pca['cluster_id'] = pd.DataFrame(kmeans.labels_)\n",
    "final_pca.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2c557d10>"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC1 in Kmeans clustering\n",
    "sns.boxplot(x='cluster_id', y='PC1', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2b8762d0>"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC2 in Kmeans clustering\n",
    "sns.boxplot(x='cluster_id', y='PC2', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2c895050>"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC3 in Kmeans clustering\n",
    "sns.boxplot(x='cluster_id', y='PC3', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2c93f550>"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC4 in Kmeans clustering\n",
    "sns.boxplot(x='cluster_id', y='PC4', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2c9eded0>"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC5 in Kmeans clustering\n",
    "sns.boxplot(x='cluster_id', y='PC5', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# single linkage\n",
    "mergings = linkage(final_df, method=\"single\", metric='euclidean')\n",
    "dendrogram(mergings)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# complete linkage\n",
    "mergings = linkage(final_df, method=\"complete\", metric='euclidean')\n",
    "dendrogram(mergings)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,\n",
       "       0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n",
       "       2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,\n",
       "       0, 2, 0, 3, 0, 0, 0, 2, 0, 0, 3, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       2, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2,\n",
       "       0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 0,\n",
       "       0, 0, 0, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0])"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3 clusters\n",
    "cluster_labels = cut_tree(mergings, n_clusters=4).reshape(-1, )\n",
    "cluster_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>country</th>\n",
       "      <th>cluster_id</th>\n",
       "      <th>cluster_labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>-2.922710</td>\n",
       "      <td>-0.004230</td>\n",
       "      <td>-1.231149</td>\n",
       "      <td>0.316843</td>\n",
       "      <td>0.034877</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.721314</td>\n",
       "      <td>-0.512738</td>\n",
       "      <td>0.203737</td>\n",
       "      <td>-0.977500</td>\n",
       "      <td>-0.486942</td>\n",
       "      <td>Albania</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-0.342371</td>\n",
       "      <td>-0.465476</td>\n",
       "      <td>1.688283</td>\n",
       "      <td>-0.010717</td>\n",
       "      <td>-0.249172</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-3.306144</td>\n",
       "      <td>1.599659</td>\n",
       "      <td>1.198166</td>\n",
       "      <td>1.373552</td>\n",
       "      <td>0.645169</td>\n",
       "      <td>Angola</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1.191659</td>\n",
       "      <td>0.232628</td>\n",
       "      <td>0.102564</td>\n",
       "      <td>-0.837921</td>\n",
       "      <td>0.043565</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PC1       PC2       PC3       PC4       PC5              country  \\\n",
       "0 -2.922710 -0.004230 -1.231149  0.316843  0.034877          Afghanistan   \n",
       "1  0.721314 -0.512738  0.203737 -0.977500 -0.486942              Albania   \n",
       "2 -0.342371 -0.465476  1.688283 -0.010717 -0.249172              Algeria   \n",
       "3 -3.306144  1.599659  1.198166  1.373552  0.645169               Angola   \n",
       "4  1.191659  0.232628  0.102564 -0.837921  0.043565  Antigua and Barbuda   \n",
       "\n",
       "   cluster_id  cluster_labels  \n",
       "0           0               0  \n",
       "1           3               0  \n",
       "2           3               0  \n",
       "3           0               1  \n",
       "4           3               0  "
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# assign cluster labels\n",
    "final_pca['cluster_labels'] = cluster_labels\n",
    "final_pca.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2cdaa1d0>"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC1 in Heirarchial clustering\n",
    "sns.boxplot(x='cluster_labels', y='PC1', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2cc05f10>"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC2 in Heirarchial clustering\n",
    "sns.boxplot(x='cluster_labels', y='PC2', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2cdc9890>"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC3 in Heirarchial clustering\n",
    "sns.boxplot(x='cluster_labels', y='PC3', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2cd58210>"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAEHCAYAAACncpHfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAATV0lEQVR4nO3df2zcd33H8dfLxiWBABGxR6tcs7A6/Gi7AsIqP6ohWpGsBjQGGhsMOmuwRdVGQiXGVAk2xtb9kMbY5gimRQqaNzo6thZWAabJIB3rBCVOGtymKcTr3HJQaJwuNCYuOPV7f9zXrete4sT+2p/v3ef5kKzcne++9+o1udf35+fjiBAAID8dqQMAANKgAAAgUxQAAGSKAgCATFEAAJCpZ6QOcC66u7tj48aNqWMAQEvZv3//RET0zH+8pQpg48aNGhkZSR0DAFqK7QeaPZ5sF5DtVba/aftbtg/Z/miqLACQo5RbAD+RdFVETNruknSH7eGI+EbCTACQjWQFEI1LkCeLu13FD5clA8AKSXoWkO1O2wclPSxpT0Tc2eQ5W22P2B45evToyocEgDaVtAAi4vGIeLmkmqTLbV/a5Dk7I6IvIvp6ep52EBsAsEiVuA4gIo5Lul3S1YmjAEA2Up4F1GN7bXF7taQ3SLovVR4AyE3Ks4AukDRku1ONIvpsRHwhYR6UbHBwUGNjY0taRr1elyTVarVFL6O3t1fbt29fUg6gHaU8C2hU0itSvT9aw9TUVOoIQNtqqSuB0VrKWOueXcbg4OCSlwXgqSpxEBgAsPIoAADIFAUAAJmiAAAgUxQAAGSKAgCATFEAAJApCgAAMkUBAECmKAAAyBQFAACZogAAIFMUAABkigIAgExRAACQKQoAADLFhDAAslOV6UqltFOWUgAAsAjtMF0pBQAgO0xX2sAxAADIFAUAAJmiAAAgUxQAAGSKAgCATFEAQCYmJia0bds2HTt2LHUUVAQFAGRiaGhIo6OjGhoaSh0FFUEBABmYmJjQ8PCwIkLDw8NsBUASBQBkYWhoSBEhSZqZmWErAJIoACALe/bs0fT0tCRpenpau3fvTpwIVUABABnYvHmzurq6JEldXV3asmVL4kSoAgoAyMDAwIBsS5I6Ojo0MDCQOBGqgMHg0FQZw+WW4ciRI5LKGbxrKVIO2VuG7u5u9ff369Zbb1V/f7/WrVuXOhIqgAJAU2NjY/rOPQe0Yc3jSXOcN93YSH1sfF+yDA9OdiZ77zINDAxofHyctX88gQLAaW1Y87g+3DeZOkZyN4ysSR2hFN3d3dqxY0fqGKgQjgEAmeBKYMyXrABsX2h7r+3Dtg/Zfn+qLEAOuBIY86XcAjgl6QMR8VJJr5b0u7YvTpinFKxloYq4EhjNJCuAiHgoIg4Ut09IOixpfao8ZWEtC1XElcBophLHAGxvlPQKSXemTbI0rGWhqrgSGM0kLwDbayTdLOm6iHi0ye+32h6xPXL06NGVD3gOWMtCVXElMJpJWgC2u9T48r8xIm5p9pyI2BkRfRHR19PTs7IBzxFrWagqrgRGMynPArKkXZIOR8THU+UoE2tZqKrZK4FtcyUwnpByC+AKSddIusr2weLnjQnzLBlrWaiygYEBXXbZZfy9xBOSXQkcEXdIcqr3Xw6Mt4Iq40pgzMdQECVjvBUArYICKBlrWQBaRfLTQAEAaVAAJWMoCACtggIoGUNBAGgVFECJGAoCQCuhAErEUBAAWgkFUCKGggDQSiiAEjEUBIBWQgGUiKEgALQSLgQrEUNBYLkMDg5qbGxsScuo1+uSpFqttqTl9Pb2avv27UtaBqqBAihZuwwFUa/X9eMTnbphZE3qKMk9cKJTzy6+PFvZ1NRU6gioGAqgZAwFgeVQxhr37DIGBweXvCy0BwoATdVqNT126iF9uG8ydZTkbhhZo1VL3G0CVBEHgQEgU2wBAGgpZRwQL8ORI0cklbN7bimWclCeAgDQUsbGxnTfwYM6P3GO2d0nxw8eTJbhB0t8PQUAoOWcL+m97TWh4KLsUizp9RwDAIBMUQAAkCkKAAAyRQEAQKYoAADIFAUAAJmiAAAgUxQAAGSKAijZxMSEtm3bxoTwACqPAijZ0NCQRkdHmRAeQOVRACWamJjQ8PCwIkLDw8NsBQCoNAqgRENDQ4pojM0xMzPDVgCASqMASrRnzx5NT09Lkqanp7V79+7EiQDg9CiAEm3evFldXV2SpK6uLm3ZsiVxIgA4PQqgRAMDA7IbQ9R2dHS0/MTwANobBVCi7u5u9ff3y7b6+/u1bt261JEA4LSYEKZkAwMDGh8fZ+0fQOVRACXr7u7Wjh07UsdAxVRhHtuqzGErLW0eW5SHAgBWwNjYmO46dJe0NmGImcYfd33vroQhJB1P+/Z4UtICsP0pSW+W9HBEXJoyC7Ds1kozr59JnSK5jts59FgVqf9P/IOkqxNnAIAsJS2AiPiapEdSZgCAXFX+GIDtrZK2StKGDRuW9b3KOFBXr9clSbVabUnL4SAZgOWWehfQgiJiZ0T0RURfT09P6jgLmpqa0tTUVOoYALCgym8BrKQy1rhnlzE4OLjkZQHAcqIAcFoPTnbqhpE1STP88GRjI/UFz0p39syDk516UbJ3B5ZP6tNAPyPp9ZK6bdclfSQidqXMhIbe3t7UESRJPy0uXlq1cVOyDC9SdT4PoExJCyAi3pny/XF6VTkAzS41YPmc80Fg23+2HEEAACvrjFsAtuevdlnSNbbXSFJEVGM1Eai4er0u/YirYCVJx6V61FOngBbeBfQ2SbdL2q3Gl78kvUPS/mXMhDZRxnUVZQxgxjUVQHMLFcBLJf2JGsM1fDAivmf7IxHBZLdYEatXr04doRS1Wk1HfZSxgNTYCqqtX9qFkijHGQsgIk5Ius72KyV92vYX1QIXj6EaWOsGqu2svswjYr+kqyRNSbpjWRMBAFbEGQvAdq/tKyQpGj4REe+2/Qu2L1qZiACA5bDQFsDfSDrR5PGp4ncAgBa1UAFsjIjR+Q9GxIikjcuSCACwIhYqgFVn+F17nJ4BAJlaqAD22f7t+Q/afq+4FgAAWtpC1wFcJ+lztt+lJ7/w+ySdJ+mtyxkMALC8FroO4IeSXmv7Skmzk7Z/MSK+uuzJAADLaqGxgFZJulZSr6S7Je2KiFMrEQwAmqnX6zohaZcidZTkHpI0WV/8uEoLHQMYUmOXz92S+iV9bNHvBAColIWOAVwcET8vSbZ3Sfrm8kcCgNOr1Wq6b2IidQwdK/5clzCD1fg8FmuhApievRERp2yf6bkAsOyqMjvb0WKk2rWb0s1Wt1ZL+zwWKoCX2X60uG1Jq4v7VmN0iOcu+p2B3BxPPB/AZPFn2mmepeOS1i/+5WUMMljGUOVlSTlc+UJnAXWuVBCgnVVhrXV2boVN69OtsUqS1lfj81iqdhiqPOmcwEAuqjA0NvMrP6kK/z+qgLH9ASBTFAAAZIoCAIBMUQAAkCkKAAAyRQEAQKYoAADIFAUAAJmiAAAgUxQAAGSKAgCATFEAAJApCgAAMkUBAECmKAAAyBQFAACZogAAIFNJC8D21ba/bXvM9vUpswBAbpIVgO1OSZ+Q1C/pYknvtH1xqjwAkJuUcwJfLmksIu6XJNs3SXqLpHsXs7DBwUGNjY2VGG9xZifeTj3naG9vb/IMAKotZQGsl/TdOffrkl41/0m2t0raKkkbNmw47cLGxsZ01933auZZzy855rnxT0OStP9/fpAsQ8fJR5K9N4DWkbIA3OSxeNoDETsl7ZSkvr6+p/1+rplnPV+PXfzmctK1sFX3fiF1BAAtIOVB4LqkC+fcr0n6fqIsAJCdlAWwT9Im2y+0fZ6kd0i6NWEeAMhKsl1AEXHK9vsk3SapU9KnIuJQqjwAkJuUxwAUEV+S9KWUGQAgV1wJDACZogAAIFMUAABkigIAgExRAACQKQoAADKV9DTQMtXrdXWc/BHDIEjqOHlM9fqp1DEAVBxbAACQqbbZAqjVavrhT57BYHBqDAZXq52fOgaAimMLAAAyRQEAQKYoAADIVNscAwDaWRlTnpY1XSnTjbYPCgDIxOrVq1NHQMVQAEALYI0by4FjAACQKQoAADJFAQBApigAAMgUBQAAmaIAACBTFAAAZIoCAIBMUQAAkCkKAAAyRQEAQKbaaiygjpOPJJ8T2I89KkmKVc9NlqHj5COSmBEMwJm1TQH09vamjiBJOnLkhCRp00Upv4DPr8znAaC62qYAqjJa4myOwcHBxEkA4Mw4BgAAmaIAACBTFAAAZIoCAIBMUQAAkCkKAAAyRQEAQKaSFIDtt9s+ZHvGdl+KDACQu1RbAPdIepukryV6fwDIXpIrgSPisCTZTvH2AAC1wDEA21ttj9geOXr0aOo4ANA2lq0AbP+H7Xua/LzlXJYTETsjoi8i+np6epYrLtD2JiYmtG3bNh07dix1FFTEshVARLwhIi5t8vPvy/WeAE5vaGhIo6OjGhoaSh0FFVH5XUAAlm5iYkLDw8OKCA0PD7MVAEnpTgN9q+26pNdI+qLt21LkAHIxNDSkiJAkzczMsBUASYkKICI+FxG1iHhmRLwgIn4xRQ4gF3v27NH09LQkaXp6Wrt3706cCFXALiAgA5s3b1ZXV5ckqaurS1u2bEmcCFVAAQAZGBgYeOK6m46ODg0MDCROhCqgAIAMdHd368orr5QkXXnllVq3bl3iRKgCCgAAMkUBABmYmJjQ3r17JUl79+7lNFBIogCALHAaKJqhAIAMcBoomqEAgAxwGiiaoQCADHAaKJqhAIAMdHd3q7+/X7bV39/PaaCQlGhCGAArb2BgQOPj46z94wkUAJCJ7u5u7dixI3UMVAi7gAAgUxQAAGSKXUBzDA4OamxsbEnLOHLkiCRp+/btS1pOb2/vkpcBAGdCAZRs9erVqSMAwFmhAOZgjRtATjgGAACZogAAIFMUAABkigIAgExRAACQKQoAADJFAQBApigAAMiUZ+cJbQW2j0p6IHWOs9AtaSJ1iDbC51kePstytcrn+bMR0TP/wZYqgFZheyQi+lLnaBd8nuXhsyxXq3+e7AICgExRAACQKQpgeexMHaDN8HmWh8+yXC39eXIMAAAyxRYAAGSKAgCATFEAJbJ9te1v2x6zfX3qPK3M9qdsP2z7ntRZ2oHtC23vtX3Y9iHb70+dqZXZXmX7m7a/VXyeH02daTE4BlAS252SviNps6S6pH2S3hkR9yYN1qJsv07SpKR/jIhLU+dpdbYvkHRBRByw/RxJ+yX9Mn8/F8e2JT07IiZtd0m6Q9L7I+IbiaOdE7YAynO5pLGIuD8ifirpJklvSZypZUXE1yQ9kjpHu4iIhyLiQHH7hKTDktanTdW6omGyuNtV/LTc2jQFUJ71kr47535d/ANDBdneKOkVku5Mm6S12e60fVDSw5L2RETLfZ4UQHnc5LGWWyNAe7O9RtLNkq6LiEdT52llEfF4RLxcUk3S5bZbblclBVCeuqQL59yvSfp+oizA0xT7qm+WdGNE3JI6T7uIiOOSbpd0deIo54wCKM8+SZtsv9D2eZLeIenWxJkASU8ctNwl6XBEfDx1nlZnu8f22uL2aklvkHRf2lTnjgIoSUSckvQ+SbepcYDtsxFxKG2q1mX7M5K+LunFtuu235s6U4u7QtI1kq6yfbD4eWPqUC3sAkl7bY+qsfK3JyK+kDjTOeM0UADIFFsAAJApCgAAMkUBAECmKAAAyBQFAACZogAAIFMUANqS7T+y/XuLeN1a279TYo5x290LPGfyTL9v8vxF/bcB81EAwFOtlXROBeAG/i2h5fCXFm3B9m/YHi0m6Pineb+73XZfcbvb9nhx+5JiUo+DxWs3SfoLSRcVj/1l8bwP2t5XPOejxWMbi8lVPinpgJ46DtTpMn7e9v5iApGt8373V7YP2P6K7Z7isYtsf7l4zX/ZfkmTZW63fW+R7aZFfHTI2DNSBwCWyvYlkj4k6YqImLD9fEnbz+Kl10r624i4sRi/qVPS9ZIuLUZ5lO0tkjapMd+DJd1aTFbzoKQXS/rNiDjbLYb3RMQjxdgx+2zfHBHHJD1b0oGI+IDtP5T0ETWGFdkp6dqIOGL7VZI+Kemqecu8XtILI+Ins2PTAGeLAkA7uErSv0XEhCQVX7Jn87qvS/qQ7ZqkW4ov2vnP2VL83FXcX6NGITwo6YFznAFqu+23FrcvLJZzTNKMpH8pHv+0pFuKYZtfK+lf52R6ZpNljkq60fbnJX3+HLIAFADagnXmuRdO6cndnatmH4yIf7Z9p6Q3SbrN9m9Jur/Jsv88Iv7+KQ82JlX58VkHtF+vxoiRr4mIk7Zvn5tlnijyHp/dEjmDN0l6naRfkvQHti8pBiYEFsQxALSDr0j6VdvrJKnYBTTXuKRXFrd/ZfZB2z8n6f6IGFRj6O7LJJ2Q9Jw5r71N0nuKNXLZXm/7ZxaR8XmS/q/48n+JpFfP+V3HnFy/LumOYrKW/7X99uJ9bftlcxdYHHi+MCL2Svp9NQ5gr1lENmSKLQC0vIg4ZPtPJf2n7cfV2F0zPucpH5P0WdvXSPrqnMd/TdK7bU9L+oGkPy52H/237XskDUfEB22/VNLXi10xk5LeLenxc4z5ZUnXFsMHf1vS3F1HP5Z0ie39kn5U5JKkd0n6O9sfVmPO2ZskfWvO6zolfdr289TYUvnrYnIS4KwwHDQAZIpdQACQKXYBASUoDibPP0vnmoi4O0Ue4GywCwgAMsUuIADIFAUAAJmiAAAgUxQAAGTq/wGmHcqXR8Pb2QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC4 in Heirarchial clustering\n",
    "sns.boxplot(x='cluster_labels', y='PC4', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2d28c6d0>"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to PC5 in Heirarchial clustering\n",
    "sns.boxplot(x='cluster_labels', y='PC5', data=final_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gdpp</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>income</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>553</td>\n",
       "      <td>90.2</td>\n",
       "      <td>1610</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>4090</td>\n",
       "      <td>16.6</td>\n",
       "      <td>9930</td>\n",
       "      <td>Albania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4460</td>\n",
       "      <td>27.3</td>\n",
       "      <td>12900</td>\n",
       "      <td>Algeria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3530</td>\n",
       "      <td>119.0</td>\n",
       "      <td>5900</td>\n",
       "      <td>Angola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>12200</td>\n",
       "      <td>10.3</td>\n",
       "      <td>19100</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    gdpp  child_mort  income              country\n",
       "0    553        90.2    1610          Afghanistan\n",
       "1   4090        16.6    9930              Albania\n",
       "2   4460        27.3   12900              Algeria\n",
       "3   3530       119.0    5900               Angola\n",
       "4  12200        10.3   19100  Antigua and Barbuda"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# carrying the analysis with original variables on the dataset\n",
    "\n",
    "original_df = country[['gdpp','child_mort','income','country']]\n",
    "original_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gdpp</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>income</th>\n",
       "      <th>country</th>\n",
       "      <th>cluster_labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>553</td>\n",
       "      <td>90.2</td>\n",
       "      <td>1610</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>4090</td>\n",
       "      <td>16.6</td>\n",
       "      <td>9930</td>\n",
       "      <td>Albania</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4460</td>\n",
       "      <td>27.3</td>\n",
       "      <td>12900</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3530</td>\n",
       "      <td>119.0</td>\n",
       "      <td>5900</td>\n",
       "      <td>Angola</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>12200</td>\n",
       "      <td>10.3</td>\n",
       "      <td>19100</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    gdpp  child_mort  income              country  cluster_labels\n",
       "0    553        90.2    1610          Afghanistan               0\n",
       "1   4090        16.6    9930              Albania               0\n",
       "2   4460        27.3   12900              Algeria               0\n",
       "3   3530       119.0    5900               Angola               1\n",
       "4  12200        10.3   19100  Antigua and Barbuda               0"
      ]
     },
     "execution_count": 252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# combining original dataset variables with their respective clusters Heirarchial\n",
    "original_df['cluster_labels'] = cluster_labels\n",
    "original_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gdpp</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>income</th>\n",
       "      <th>country</th>\n",
       "      <th>cluster_labels</th>\n",
       "      <th>cluster_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>553</td>\n",
       "      <td>90.2</td>\n",
       "      <td>1610</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>4090</td>\n",
       "      <td>16.6</td>\n",
       "      <td>9930</td>\n",
       "      <td>Albania</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4460</td>\n",
       "      <td>27.3</td>\n",
       "      <td>12900</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3530</td>\n",
       "      <td>119.0</td>\n",
       "      <td>5900</td>\n",
       "      <td>Angola</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>12200</td>\n",
       "      <td>10.3</td>\n",
       "      <td>19100</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    gdpp  child_mort  income              country  cluster_labels  cluster_id\n",
       "0    553        90.2    1610          Afghanistan               0           0\n",
       "1   4090        16.6    9930              Albania               0           3\n",
       "2   4460        27.3   12900              Algeria               0           3\n",
       "3   3530       119.0    5900               Angola               1           0\n",
       "4  12200        10.3   19100  Antigua and Barbuda               0           3"
      ]
     },
     "execution_count": 253,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# combining original dataset variables with their respective clusters KMeans\n",
    "original_df['cluster_id'] = pd.DataFrame(kmeans.labels_)\n",
    "original_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2d358bd0>"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to GDP per capita in Kmeans clustering\n",
    "plt.figure(figsize=(5,5))\n",
    "sns.boxplot(x='cluster_id', y='gdpp', data=original_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2d4c1310>"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to child mortality in Kmeans clustering\n",
    "plt.figure(figsize=(5,8))\n",
    "sns.boxplot(x='cluster_id', y='child_mort', data=original_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2d60fdd0>"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to income in Kmeans clustering\n",
    "plt.figure(figsize=(5,5))\n",
    "sns.boxplot(x='cluster_id', y='income', data=original_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2d619110>"
      ]
     },
     "execution_count": 257,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to GDP per capita in heirarchial clustering\n",
    "plt.figure(figsize=(5,5))\n",
    "sns.boxplot(x='cluster_labels', y='gdpp', data=original_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2d8b4750>"
      ]
     },
     "execution_count": 258,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to child mortality in heirarchial clustering\n",
    "plt.figure(figsize=(5,5))\n",
    "sns.boxplot(x='cluster_labels', y='child_mort', data=original_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2da0ed10>"
      ]
     },
     "execution_count": 259,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot clusters with respect to income in heirarchial clustering\n",
    "plt.figure(figsize=(5,5))\n",
    "sns.boxplot(x='cluster_labels', y='income', data=original_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gdpp</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>income</th>\n",
       "      <th>country</th>\n",
       "      <th>cluster_labels</th>\n",
       "      <th>cluster_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>553</td>\n",
       "      <td>90.2</td>\n",
       "      <td>1610</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3530</td>\n",
       "      <td>119.0</td>\n",
       "      <td>5900</td>\n",
       "      <td>Angola</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>758</td>\n",
       "      <td>111.0</td>\n",
       "      <td>1820</td>\n",
       "      <td>Benin</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>6350</td>\n",
       "      <td>52.5</td>\n",
       "      <td>13300</td>\n",
       "      <td>Botswana</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25</td>\n",
       "      <td>575</td>\n",
       "      <td>116.0</td>\n",
       "      <td>1430</td>\n",
       "      <td>Burkina Faso</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26</td>\n",
       "      <td>231</td>\n",
       "      <td>93.6</td>\n",
       "      <td>764</td>\n",
       "      <td>Burundi</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>28</td>\n",
       "      <td>1310</td>\n",
       "      <td>108.0</td>\n",
       "      <td>2660</td>\n",
       "      <td>Cameroon</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>446</td>\n",
       "      <td>149.0</td>\n",
       "      <td>888</td>\n",
       "      <td>Central African Republic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32</td>\n",
       "      <td>897</td>\n",
       "      <td>150.0</td>\n",
       "      <td>1930</td>\n",
       "      <td>Chad</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>36</td>\n",
       "      <td>769</td>\n",
       "      <td>88.2</td>\n",
       "      <td>1410</td>\n",
       "      <td>Comoros</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>37</td>\n",
       "      <td>334</td>\n",
       "      <td>116.0</td>\n",
       "      <td>609</td>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>2740</td>\n",
       "      <td>63.9</td>\n",
       "      <td>5190</td>\n",
       "      <td>Congo, Rep.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40</td>\n",
       "      <td>1220</td>\n",
       "      <td>111.0</td>\n",
       "      <td>2690</td>\n",
       "      <td>Cote d'Ivoire</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>49</td>\n",
       "      <td>17100</td>\n",
       "      <td>111.0</td>\n",
       "      <td>33700</td>\n",
       "      <td>Equatorial Guinea</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50</td>\n",
       "      <td>482</td>\n",
       "      <td>55.2</td>\n",
       "      <td>1420</td>\n",
       "      <td>Eritrea</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>55</td>\n",
       "      <td>8750</td>\n",
       "      <td>63.7</td>\n",
       "      <td>15400</td>\n",
       "      <td>Gabon</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>56</td>\n",
       "      <td>562</td>\n",
       "      <td>80.3</td>\n",
       "      <td>1660</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>59</td>\n",
       "      <td>1310</td>\n",
       "      <td>74.7</td>\n",
       "      <td>3060</td>\n",
       "      <td>Ghana</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>63</td>\n",
       "      <td>648</td>\n",
       "      <td>109.0</td>\n",
       "      <td>1190</td>\n",
       "      <td>Guinea</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>64</td>\n",
       "      <td>547</td>\n",
       "      <td>114.0</td>\n",
       "      <td>1390</td>\n",
       "      <td>Guinea-Bissau</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>66</td>\n",
       "      <td>662</td>\n",
       "      <td>208.0</td>\n",
       "      <td>1500</td>\n",
       "      <td>Haiti</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>72</td>\n",
       "      <td>4500</td>\n",
       "      <td>36.9</td>\n",
       "      <td>12700</td>\n",
       "      <td>Iraq</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80</td>\n",
       "      <td>967</td>\n",
       "      <td>62.2</td>\n",
       "      <td>2480</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>81</td>\n",
       "      <td>1490</td>\n",
       "      <td>62.7</td>\n",
       "      <td>1730</td>\n",
       "      <td>Kiribati</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>84</td>\n",
       "      <td>1140</td>\n",
       "      <td>78.9</td>\n",
       "      <td>3980</td>\n",
       "      <td>Lao</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>87</td>\n",
       "      <td>1170</td>\n",
       "      <td>99.7</td>\n",
       "      <td>2380</td>\n",
       "      <td>Lesotho</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>88</td>\n",
       "      <td>327</td>\n",
       "      <td>89.3</td>\n",
       "      <td>700</td>\n",
       "      <td>Liberia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>93</td>\n",
       "      <td>413</td>\n",
       "      <td>62.2</td>\n",
       "      <td>1390</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>94</td>\n",
       "      <td>459</td>\n",
       "      <td>90.5</td>\n",
       "      <td>1030</td>\n",
       "      <td>Malawi</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>97</td>\n",
       "      <td>708</td>\n",
       "      <td>137.0</td>\n",
       "      <td>1870</td>\n",
       "      <td>Mali</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>99</td>\n",
       "      <td>1200</td>\n",
       "      <td>97.4</td>\n",
       "      <td>3320</td>\n",
       "      <td>Mauritania</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>106</td>\n",
       "      <td>419</td>\n",
       "      <td>101.0</td>\n",
       "      <td>918</td>\n",
       "      <td>Mozambique</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>108</td>\n",
       "      <td>5190</td>\n",
       "      <td>56.0</td>\n",
       "      <td>8460</td>\n",
       "      <td>Namibia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>112</td>\n",
       "      <td>348</td>\n",
       "      <td>123.0</td>\n",
       "      <td>814</td>\n",
       "      <td>Niger</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>113</td>\n",
       "      <td>2330</td>\n",
       "      <td>130.0</td>\n",
       "      <td>5150</td>\n",
       "      <td>Nigeria</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>116</td>\n",
       "      <td>1040</td>\n",
       "      <td>92.1</td>\n",
       "      <td>4280</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>126</td>\n",
       "      <td>563</td>\n",
       "      <td>63.6</td>\n",
       "      <td>1350</td>\n",
       "      <td>Rwanda</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>129</td>\n",
       "      <td>1000</td>\n",
       "      <td>66.8</td>\n",
       "      <td>2180</td>\n",
       "      <td>Senegal</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>132</td>\n",
       "      <td>399</td>\n",
       "      <td>160.0</td>\n",
       "      <td>1220</td>\n",
       "      <td>Sierra Leone</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>137</td>\n",
       "      <td>7280</td>\n",
       "      <td>53.7</td>\n",
       "      <td>12000</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>142</td>\n",
       "      <td>1480</td>\n",
       "      <td>76.7</td>\n",
       "      <td>3370</td>\n",
       "      <td>Sudan</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>147</td>\n",
       "      <td>702</td>\n",
       "      <td>71.9</td>\n",
       "      <td>2090</td>\n",
       "      <td>Tanzania</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>149</td>\n",
       "      <td>3600</td>\n",
       "      <td>62.6</td>\n",
       "      <td>1850</td>\n",
       "      <td>Timor-Leste</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>150</td>\n",
       "      <td>488</td>\n",
       "      <td>90.3</td>\n",
       "      <td>1210</td>\n",
       "      <td>Togo</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>155</td>\n",
       "      <td>595</td>\n",
       "      <td>81.0</td>\n",
       "      <td>1540</td>\n",
       "      <td>Uganda</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>165</td>\n",
       "      <td>1310</td>\n",
       "      <td>56.3</td>\n",
       "      <td>4480</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>166</td>\n",
       "      <td>1460</td>\n",
       "      <td>83.1</td>\n",
       "      <td>3280</td>\n",
       "      <td>Zambia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      gdpp  child_mort  income                   country  cluster_labels  \\\n",
       "0      553        90.2    1610               Afghanistan               0   \n",
       "3     3530       119.0    5900                    Angola               1   \n",
       "17     758       111.0    1820                     Benin               0   \n",
       "21    6350        52.5   13300                  Botswana               0   \n",
       "25     575       116.0    1430              Burkina Faso               0   \n",
       "26     231        93.6     764                   Burundi               0   \n",
       "28    1310       108.0    2660                  Cameroon               0   \n",
       "31     446       149.0     888  Central African Republic               0   \n",
       "32     897       150.0    1930                      Chad               0   \n",
       "36     769        88.2    1410                   Comoros               0   \n",
       "37     334       116.0     609          Congo, Dem. Rep.               0   \n",
       "38    2740        63.9    5190               Congo, Rep.               1   \n",
       "40    1220       111.0    2690             Cote d'Ivoire               0   \n",
       "49   17100       111.0   33700         Equatorial Guinea               1   \n",
       "50     482        55.2    1420                   Eritrea               0   \n",
       "55    8750        63.7   15400                     Gabon               0   \n",
       "56     562        80.3    1660                    Gambia               0   \n",
       "59    1310        74.7    3060                     Ghana               0   \n",
       "63     648       109.0    1190                    Guinea               0   \n",
       "64     547       114.0    1390             Guinea-Bissau               0   \n",
       "66     662       208.0    1500                     Haiti               0   \n",
       "72    4500        36.9   12700                      Iraq               0   \n",
       "80     967        62.2    2480                     Kenya               0   \n",
       "81    1490        62.7    1730                  Kiribati               0   \n",
       "84    1140        78.9    3980                       Lao               0   \n",
       "87    1170        99.7    2380                   Lesotho               0   \n",
       "88     327        89.3     700                   Liberia               0   \n",
       "93     413        62.2    1390                Madagascar               0   \n",
       "94     459        90.5    1030                    Malawi               0   \n",
       "97     708       137.0    1870                      Mali               0   \n",
       "99    1200        97.4    3320                Mauritania               1   \n",
       "106    419       101.0     918                Mozambique               0   \n",
       "108   5190        56.0    8460                   Namibia               0   \n",
       "112    348       123.0     814                     Niger               0   \n",
       "113   2330       130.0    5150                   Nigeria               1   \n",
       "116   1040        92.1    4280                  Pakistan               0   \n",
       "126    563        63.6    1350                    Rwanda               0   \n",
       "129   1000        66.8    2180                   Senegal               0   \n",
       "132    399       160.0    1220              Sierra Leone               0   \n",
       "137   7280        53.7   12000              South Africa               0   \n",
       "142   1480        76.7    3370                     Sudan               1   \n",
       "147    702        71.9    2090                  Tanzania               0   \n",
       "149   3600        62.6    1850               Timor-Leste               1   \n",
       "150    488        90.3    1210                      Togo               0   \n",
       "155    595        81.0    1540                    Uganda               0   \n",
       "165   1310        56.3    4480                     Yemen               1   \n",
       "166   1460        83.1    3280                    Zambia               0   \n",
       "\n",
       "     cluster_id  \n",
       "0             0  \n",
       "3             0  \n",
       "17            0  \n",
       "21            0  \n",
       "25            0  \n",
       "26            0  \n",
       "28            0  \n",
       "31            0  \n",
       "32            0  \n",
       "36            0  \n",
       "37            0  \n",
       "38            0  \n",
       "40            0  \n",
       "49            0  \n",
       "50            0  \n",
       "55            0  \n",
       "56            0  \n",
       "59            0  \n",
       "63            0  \n",
       "64            0  \n",
       "66            0  \n",
       "72            0  \n",
       "80            0  \n",
       "81            0  \n",
       "84            0  \n",
       "87            0  \n",
       "88            0  \n",
       "93            0  \n",
       "94            0  \n",
       "97            0  \n",
       "99            0  \n",
       "106           0  \n",
       "108           0  \n",
       "112           0  \n",
       "113           0  \n",
       "116           0  \n",
       "126           0  \n",
       "129           0  \n",
       "132           0  \n",
       "137           0  \n",
       "142           0  \n",
       "147           0  \n",
       "149           0  \n",
       "150           0  \n",
       "155           0  \n",
       "165           0  \n",
       "166           0  "
      ]
     },
     "execution_count": 260,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## As we can observe, in Kmeans clustering, countries with low GDP per capita, high child mortality and low income are concentrated in cluster number 0\n",
    "#k means clustering list of countries\n",
    "final_list_countries = original_df.loc[(original_df.cluster_id == 0),:]\n",
    "final_list_countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gdpp</th>\n",
       "      <th>child_mort</th>\n",
       "      <th>income</th>\n",
       "      <th>country</th>\n",
       "      <th>cluster_labels</th>\n",
       "      <th>cluster_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3530</td>\n",
       "      <td>119.0</td>\n",
       "      <td>5900</td>\n",
       "      <td>Angola</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>2740</td>\n",
       "      <td>63.9</td>\n",
       "      <td>5190</td>\n",
       "      <td>Congo, Rep.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>49</td>\n",
       "      <td>17100</td>\n",
       "      <td>111.0</td>\n",
       "      <td>33700</td>\n",
       "      <td>Equatorial Guinea</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>99</td>\n",
       "      <td>1200</td>\n",
       "      <td>97.4</td>\n",
       "      <td>3320</td>\n",
       "      <td>Mauritania</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>103</td>\n",
       "      <td>2650</td>\n",
       "      <td>26.1</td>\n",
       "      <td>7710</td>\n",
       "      <td>Mongolia</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>113</td>\n",
       "      <td>2330</td>\n",
       "      <td>130.0</td>\n",
       "      <td>5150</td>\n",
       "      <td>Nigeria</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>142</td>\n",
       "      <td>1480</td>\n",
       "      <td>76.7</td>\n",
       "      <td>3370</td>\n",
       "      <td>Sudan</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>149</td>\n",
       "      <td>3600</td>\n",
       "      <td>62.6</td>\n",
       "      <td>1850</td>\n",
       "      <td>Timor-Leste</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>163</td>\n",
       "      <td>13500</td>\n",
       "      <td>17.1</td>\n",
       "      <td>16500</td>\n",
       "      <td>Venezuela</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>165</td>\n",
       "      <td>1310</td>\n",
       "      <td>56.3</td>\n",
       "      <td>4480</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      gdpp  child_mort  income            country  cluster_labels  cluster_id\n",
       "3     3530       119.0    5900             Angola               1           0\n",
       "38    2740        63.9    5190        Congo, Rep.               1           0\n",
       "49   17100       111.0   33700  Equatorial Guinea               1           0\n",
       "99    1200        97.4    3320         Mauritania               1           0\n",
       "103   2650        26.1    7710           Mongolia               1           3\n",
       "113   2330       130.0    5150            Nigeria               1           0\n",
       "142   1480        76.7    3370              Sudan               1           0\n",
       "149   3600        62.6    1850        Timor-Leste               1           0\n",
       "163  13500        17.1   16500          Venezuela               1           3\n",
       "165   1310        56.3    4480              Yemen               1           0"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## As we can observe, in Kmeans clustering, countries with low GDP per capita, high child mortality and low income are concentrated in cluster number 1\n",
    "final_list_countries_heirarchial = original_df.loc[(original_df.cluster_labels == 1),:]\n",
    "final_list_countries_heirarchial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since most of the countries from Heirarchial clustering(except 2) are also in the countries in the Kmeans clustering, We should considerKmeans clustering and allocate funds to the countries in the cluster number 0 of Kmeans clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1a2f034ed0>"
      ]
     },
     "execution_count": 270,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 776.375x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Kmeans clustering plot between PC1 & PC2\n",
    "\n",
    "sns.pairplot(data=final_pca, x_vars=[\"PC1\"], y_vars=[\"PC2\"], hue = \"cluster_id\", size=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1a30c0a050>"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 796.625x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Heirarchial clustering plot between PC1 & PC2\n",
    "sns.pairplot(data=final_pca, x_vars=[\"PC1\"], y_vars=[\"PC2\"], hue = \"cluster_labels\", size=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1a315a7690>"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 776.375x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Kmeans clustering plot between child mortality and GDP per capita\n",
    "sns.pairplot(data=original_df, x_vars=[\"gdpp\"], y_vars=[\"child_mort\"], hue = \"cluster_id\", size=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1a31742fd0>"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 796.625x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Heirarchial clustering plot between child mortality and GDP per capita\n",
    "sns.pairplot(data=original_df, x_vars=[\"gdpp\"], y_vars=[\"child_mort\"], hue = \"cluster_labels\", size=10)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
